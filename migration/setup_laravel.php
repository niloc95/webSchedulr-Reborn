<?php
namespace Migration;

/**
 * Laravel Setup and Migration Manager
 * Generated at: 2025-02-26 14:18:53
 * Generated by: niloc95
 */
class SetupManager
{
    private $timestamp;
    private $user;
    private $basePath;
    private $backupPath;
    private $dbConfig;

    public function __construct()
    {
        $this->timestamp = '2025-02-26 14:18:53';
        $this->user = 'niloc95';
        $this->basePath = dirname(__DIR__);
        $this->backupPath = dirname($this->basePath) . '/webschedulr-backup';
        $this->dbConfig = [
            'username' => '',
            'password' => ''
        ];
    }

    public function run()
    {
        try {
            $this->output("Starting Laravel Setup and Migration Process");
            
            // 1. Verify Laravel Installation
            $this->verifyLaravelInstallation();
            
            // 2. Get Database Credentials
            $this->getDatabaseCredentials();
            
            // 3. Setup Environment
            $this->setupEnvironment();
            
            // 4. Install Dependencies
            $this->installDependencies();
            
            // 5. Setup Database
            $this->setupDatabase();
            
            // 6. Restore Migration Tools
            $this->restoreMigrationTools();
            
            $this->output("Setup completed successfully!");
            
        } catch (\Exception $e) {
            $this->output("Error: " . $e->getMessage());
            exit(1);
        }
    }

    private function getDatabaseCredentials()
    {
        $this->output("\nDatabase Configuration:");
        
        // Get username
        echo "Enter MySQL username (default: root): ";
        $username = trim(fgets(STDIN));
        $this->dbConfig['username'] = empty($username) ? 'root' : $username;

        // Get password
        echo "Enter MySQL password: ";
        system('stty -echo');
        $password = trim(fgets(STDIN));
        system('stty echo');
        echo "\n"; // Add a newline after password input
        $this->dbConfig['password'] = $password;

        $this->output("Database credentials configured.");
    }

    private function setupEnvironment()
    {
        $this->output("Setting up environment...");
        
        // Copy .env file if it doesn't exist
        if (!file_exists($this->basePath . '/.env')) {
            copy($this->basePath . '/.env.example', $this->basePath . '/.env');
            $this->output("Created .env file");
        }

        // Update .env configurations
        $env = file_get_contents($this->basePath . '/.env');
        $env = preg_replace('/APP_NAME=.*/', 'APP_NAME=WebSchedulr', $env);
        $env = preg_replace('/DB_DATABASE=.*/', 'DB_DATABASE=webschedulr', $env);
        $env = preg_replace('/DB_USERNAME=.*/', 'DB_USERNAME=' . $this->dbConfig['username'], $env);
        $env = preg_replace('/DB_PASSWORD=.*/', 'DB_PASSWORD=' . $this->dbConfig['password'], $env);
        file_put_contents($this->basePath . '/.env', $env);
        
        // Generate application key
        shell_exec('php artisan key:generate');
        $this->output("Environment configured");
    }

    private function setupDatabase()
    {
        $this->output("Setting up database...");
        
        try {
            // Create database if it doesn't exist
            $dbname = 'webschedulr';
            $username = escapeshellarg($this->dbConfig['username']);
            $password = escapeshellarg($this->dbConfig['password']);
            
            $command = sprintf(
                "mysql -u%s -p%s -e 'CREATE DATABASE IF NOT EXISTS %s;'",
                $username,
                $password,
                $dbname
            );
            
            $result = shell_exec($command . " 2>&1");
            
            if (strpos($result, 'ERROR') !== false) {
                throw new \Exception("Database creation failed: " . $result);
            }
            
            // Run migrations
            $this->output("Running migrations...");
            $migrationResult = shell_exec('php artisan migrate --force 2>&1');
            
            if ($migrationResult) {
                $this->output($migrationResult);
            }
            
            $this->output("Database setup completed");
            
        } catch (\Exception $e) {
            throw new \Exception("Database setup failed: " . $e->getMessage());
        }
    }

    // ... [previous verifyLaravelInstallation, installDependencies, and restoreMigrationTools methods remain the same]

    private function output($message)
    {
        $timestamp = date('Y-m-d H:i:s');
        echo "[$timestamp] $message\n";
    }
}

// Run the setup
$setup = new SetupManager();
$setup->run();