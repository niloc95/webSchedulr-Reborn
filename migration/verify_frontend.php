<?php
// Generated at: 2025-02-27 07:56:11
// Generated by: niloc95

class FrontendVerifier
{
    private $basePath;
    private $requiredFiles = [
        'resources/js/app.js',
        'resources/js/App.vue',
        'resources/js/router/index.js',
        'resources/js/views/Home.vue',
        'resources/js/views/Calendar.vue',
        'resources/js/views/auth/Login.vue',
        'resources/js/views/auth/Register.vue'
    ];

    private $requiredDirs = [
        'resources/js/components',
        'resources/js/router',
        'resources/js/views',
        'resources/js/views/auth'
    ];

    public function __construct()
    {
        $this->basePath = dirname(__DIR__);
    }

    public function verify()
    {
        echo "Verifying frontend structure...\n";
        
        $this->verifyDirectories();
        $this->verifyFiles();
        
        echo "\nVerifying npm packages...\n";
        $this->verifyPackages();
    }

    private function verifyDirectories()
    {
        foreach ($this->requiredDirs as $dir) {
            $path = $this->basePath . '/' . $dir;
            if (!is_dir($path)) {
                echo "Creating directory: {$dir}\n";
                mkdir($path, 0755, true);
            }
        }
    }

    private function verifyFiles()
    {
        foreach ($this->requiredFiles as $file) {
            $path = $this->basePath . '/' . $file;
            if (!file_exists($path)) {
                echo "❌ Missing file: {$file}\n";
            } else {
                echo "✅ Found file: {$file}\n";
            }
        }
    }

    private function verifyPackages()
    {
        $packageJson = json_decode(file_get_contents($this->basePath . '/package.json'), true);
        $requiredPackages = [
            'vue',
            'vue-router',
            'pinia',
            '@fullcalendar/vue3',
            '@fullcalendar/daygrid',
            '@fullcalendar/interaction'
        ];

        foreach ($requiredPackages as $package) {
            if (
                !isset($packageJson['dependencies'][$package]) &&
                !isset($packageJson['devDependencies'][$package])
            ) {
                echo "❌ Missing package: {$package}\n";
            } else {
                echo "✅ Found package: {$package}\n";
            }
        }
    }
}

// Run verification
$verifier = new FrontendVerifier();
$verifier->verify();